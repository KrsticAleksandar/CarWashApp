// <auto-generated />
using System;
using CarWashApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarWashApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarWashApp.Entities.GeneralUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7bfbaf9a-ca2e-462b-8ef7-32d102cf1d5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d418d728-55ef-4e08-8fb3-41529cce4e73",
                            Email = "aleksandarjovanovic@example.com",
                            EmailConfirmed = false,
                            FirstName = "Aleksandar",
                            LastName = "Jovanovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEKSANDARJOVANOVIC@EXAMPLE.COM",
                            NormalizedUserName = "ALEKSANDARJOVANOVIC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGpht70GsFePxF2x5g8bCly1RjeC2OV5bG2ORxOLlmyAY3a8FtYGU0R8knavsqqKuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1187fc3a-06f4-4447-8a6d-80957cbf934a",
                            TwoFactorEnabled = false,
                            UserName = "aleksandarjovanovic@example.com"
                        },
                        new
                        {
                            Id = "e843d605-789e-4d0b-b9c6-9a2409a04857",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1562aea2-aac7-4568-9892-7ee7d75012f4",
                            Email = "mihailosimic@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mihailo",
                            LastName = "Simic",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIHAILOSIMIC@EXAMPLE.COM",
                            NormalizedUserName = "MIHAILOSIMIC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKPT4fLtLBzMpOfVPD8x2WAry00N2nuSAGO3I9TcaFyLIOUoAcgRSYY/Tx/Ageyu+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1f2c76c-a88a-419a-8b12-e6c36adfacb6",
                            TwoFactorEnabled = false,
                            UserName = "mihailosimic@example.com"
                        },
                        new
                        {
                            Id = "17529DFE-458B-43E1-8F99-473F6F671812",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36db3789-bdb8-4967-92c8-adc27e0a24df",
                            Email = "lukabulatovic@example.com",
                            EmailConfirmed = false,
                            FirstName = "Luka",
                            LastName = "Bulatovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUKABULATOVIC@EXAMPLE.COM",
                            NormalizedUserName = "LUKABULATOVIC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBnsQPU0S10djid4FYIhO+vez5QqI/ZEXxI9ClG9jKJ3lC+aGYly1fAsg7QIJiZg1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d47a57b5-a422-4dd5-aac0-13077a31a3f7",
                            TwoFactorEnabled = false,
                            UserName = "lukabulatovic@example.com"
                        },
                        new
                        {
                            Id = "fdc70c25-e01f-4ecb-8a97-2af2857c4cb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23c10082-c5e6-48c0-9954-9c78a4bde43a",
                            Email = "nikolapanic@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nikola",
                            LastName = "Panic",
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOLAPANIC@EXAMPLE.COM",
                            NormalizedUserName = "NIKOLAPANIC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3pMCTrUAp2T04uAYttfa8OYfFzq00uTacSGwpifefiRrLJh8jcswQyy/gIYU/QdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cc2311b-2aaf-44ba-ba0d-0c2b3e4eaabc",
                            TwoFactorEnabled = false,
                            UserName = "nikolapanic@example.com"
                        },
                        new
                        {
                            Id = "66342aee-8dc1-4b13-b912-f84fe202ef9d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c198ca0-7253-4bce-b9c6-f83ea66cfa8b",
                            Email = "milosmijatovic@example.com",
                            EmailConfirmed = false,
                            FirstName = "Milos",
                            LastName = "Mijatovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "MILOSMIJATOVIC@EXAMPLE.COM",
                            NormalizedUserName = "MILOSMIJATOVIC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECPmntJGdgGBp88iwfOqBuE+CJYqvuxlrXqA3BCxe7mtj/Wc4f486+W6XzNiRqX02Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "695bf8ce-e6b1-45a0-a2bc-92b247c81c0f",
                            TwoFactorEnabled = false,
                            UserName = "milosmijatovic@example.com"
                        },
                        new
                        {
                            Id = "11dfd9c9-5d08-4196-9397-654a3b6fef3a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb539327-548c-4e1c-9472-add14b255a17",
                            Email = "lukapavlovic@example.com",
                            EmailConfirmed = false,
                            FirstName = "Luka",
                            LastName = "Pavlovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUKAPAVLOVIC@EXAMPLE.COM",
                            NormalizedUserName = "LUKAPAVLOVIC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJWUTL5MjM8Ztrg8FnGxpnswY6g8JeXaXoN9E2LpxQ8iuVPVjxanAidDoretPLznQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95613d8f-5d10-4e8f-a4be-6aa11ae29660",
                            TwoFactorEnabled = false,
                            UserName = "lukapavlovic@example.com"
                        },
                        new
                        {
                            Id = "4895dcbe-94df-45f7-87f5-c519b8380878",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8421d23a-bc0b-495c-9946-df47dd69e60e",
                            Email = "stefanijamarkovic@example.com",
                            EmailConfirmed = false,
                            FirstName = "Stefanija",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFANIJAMARKOVIC@EXAMPLE.COM",
                            NormalizedUserName = "STEFANIJAMARKOVIC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKo4rOt9ZPCXm1IuhxRhpwsS8kKDkVgbifO6WzUHPsIt2fHZRcGnBiYaBkQt3bY54A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2c17e6c-3115-49ec-adb9-c0f74b83c50a",
                            TwoFactorEnabled = false,
                            UserName = "stefanijamarkovic@example.com"
                        },
                        new
                        {
                            Id = "86eb1953-9686-4779-9d8f-7b236878435b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91a506c0-b049-4a9e-83c4-20946920e138",
                            Email = "vanjaarsic@example.com",
                            EmailConfirmed = false,
                            FirstName = "Vanja",
                            LastName = "Arsic",
                            LockoutEnabled = false,
                            NormalizedEmail = "VANJAARSIC@EXAMPLE.COM",
                            NormalizedUserName = "VANJAARSIC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMk72B/nb1oIsH8qycayi4mq5A3ZZQCRg0ukwb2r6ugtU6WPI2VsIjYaZfiT8p8vPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93872861-9d82-4341-9f22-c3787dd2458d",
                            TwoFactorEnabled = false,
                            UserName = "vanjaarsic@example.com"
                        },
                        new
                        {
                            Id = "8492a90d-2a60-4d51-913f-35f7522c40a1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bfa0ed3-6afa-45ef-b973-e55445d5ba4b",
                            Email = "aleksandarkrstic@example.com",
                            EmailConfirmed = false,
                            FirstName = "Aleksandar",
                            LastName = "Krstic",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEKSANDARKRSTIC@EXAMPLE.COM",
                            NormalizedUserName = "ALEKSANDARKRSTIC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL9zLHHJscTY4BW9Dj90AJgcBZz9GAQ49X04Zdiu2zPFEdhAX2lPr697zStaNU/nMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41bb5d1b-d84c-498c-a3bf-de5f5edb6e79",
                            TwoFactorEnabled = false,
                            UserName = "aleksandarkrstic@example.com"
                        });
                });

            modelBuilder.Entity("CarWashApp.Entities.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"), 1L, 1);

                    b.Property<string>("ConsumerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReservationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ReservationId");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ShopId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            ReservationId = 1,
                            ConsumerId = "11dfd9c9-5d08-4196-9397-654a3b6fef3a",
                            ReservationDateTime = new DateTime(2022, 10, 12, 14, 27, 23, 907, DateTimeKind.Local).AddTicks(8301),
                            ServiceId = 1,
                            ShopId = 1,
                            Status = true
                        },
                        new
                        {
                            ReservationId = 2,
                            ConsumerId = "17529DFE-458B-43E1-8F99-473F6F671812",
                            ReservationDateTime = new DateTime(2022, 10, 12, 14, 27, 23, 907, DateTimeKind.Local).AddTicks(8339),
                            ServiceId = 2,
                            ShopId = 1,
                            Status = true
                        },
                        new
                        {
                            ReservationId = 3,
                            ConsumerId = "4895dcbe-94df-45f7-87f5-c519b8380878",
                            ReservationDateTime = new DateTime(2022, 10, 12, 14, 27, 23, 907, DateTimeKind.Local).AddTicks(8341),
                            ServiceId = 3,
                            ShopId = 1,
                            Status = true
                        },
                        new
                        {
                            ReservationId = 4,
                            ConsumerId = "66342aee-8dc1-4b13-b912-f84fe202ef9d",
                            ReservationDateTime = new DateTime(2022, 10, 12, 14, 27, 23, 907, DateTimeKind.Local).AddTicks(8343),
                            ServiceId = 1,
                            ShopId = 2,
                            Status = true
                        },
                        new
                        {
                            ReservationId = 5,
                            ConsumerId = "7bfbaf9a-ca2e-462b-8ef7-32d102cf1d5c",
                            ReservationDateTime = new DateTime(2022, 10, 12, 14, 27, 23, 907, DateTimeKind.Local).AddTicks(8344),
                            ServiceId = 2,
                            ShopId = 2,
                            Status = true
                        },
                        new
                        {
                            ReservationId = 6,
                            ConsumerId = "86eb1953-9686-4779-9d8f-7b236878435b",
                            ReservationDateTime = new DateTime(2022, 10, 12, 14, 27, 23, 907, DateTimeKind.Local).AddTicks(8347),
                            ServiceId = 3,
                            ShopId = 2,
                            Status = true
                        },
                        new
                        {
                            ReservationId = 7,
                            ConsumerId = "e843d605-789e-4d0b-b9c6-9a2409a04857",
                            ReservationDateTime = new DateTime(2022, 10, 12, 14, 27, 23, 907, DateTimeKind.Local).AddTicks(8348),
                            ServiceId = 1,
                            ShopId = 3,
                            Status = true
                        },
                        new
                        {
                            ReservationId = 8,
                            ConsumerId = "fdc70c25-e01f-4ecb-8a97-2af2857c4cb9",
                            ReservationDateTime = new DateTime(2022, 10, 12, 14, 27, 23, 907, DateTimeKind.Local).AddTicks(8350),
                            ServiceId = 2,
                            ShopId = 3,
                            Status = true
                        });
                });

            modelBuilder.Entity("CarWashApp.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"), 1L, 1);

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            Duration = 1,
                            Price = 12f,
                            ServiceType = "Regular"
                        },
                        new
                        {
                            ServiceId = 2,
                            Duration = 1,
                            Price = 16f,
                            ServiceType = "Extended"
                        },
                        new
                        {
                            ServiceId = 3,
                            Duration = 1,
                            Price = 26f,
                            ServiceType = "Premium"
                        });
                });

            modelBuilder.Entity("CarWashApp.Entities.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShopId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClosingTime")
                        .HasColumnType("int");

                    b.Property<int>("OpeningTime")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShopId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            ShopId = 1,
                            Address = "Tomazeova 36",
                            ClosingTime = 18,
                            OpeningTime = 8,
                            OwnerId = "8492a90d-2a60-4d51-913f-35f7522c40a1",
                            ShopName = "Shop1"
                        },
                        new
                        {
                            ShopId = 2,
                            Address = "Maksima Gorkog 9",
                            ClosingTime = 18,
                            OpeningTime = 8,
                            OwnerId = "8492a90d-2a60-4d51-913f-35f7522c40a1",
                            ShopName = "Shop2"
                        },
                        new
                        {
                            ShopId = 3,
                            Address = "Gospodara Vucica 18",
                            ClosingTime = 18,
                            OpeningTime = 8,
                            OwnerId = "8492a90d-2a60-4d51-913f-35f7522c40a1",
                            ShopName = "Shop3"
                        });
                });

            modelBuilder.Entity("CarWashApp.Entities.ShopsServices", b =>
                {
                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("ShopId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ShopsServices");

                    b.HasData(
                        new
                        {
                            ShopId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            ShopId = 1,
                            ServiceId = 2
                        },
                        new
                        {
                            ShopId = 1,
                            ServiceId = 3
                        },
                        new
                        {
                            ShopId = 2,
                            ServiceId = 1
                        },
                        new
                        {
                            ShopId = 2,
                            ServiceId = 2
                        },
                        new
                        {
                            ShopId = 2,
                            ServiceId = 3
                        },
                        new
                        {
                            ShopId = 3,
                            ServiceId = 1
                        },
                        new
                        {
                            ShopId = 3,
                            ServiceId = 2
                        },
                        new
                        {
                            ShopId = 3,
                            ServiceId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Owner",
                            UserId = "8492a90d-2a60-4d51-913f-35f7522c40a1"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Consumer",
                            UserId = "11dfd9c9-5d08-4196-9397-654a3b6fef3a"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Consumer",
                            UserId = "17529DFE-458B-43E1-8F99-473F6F671812"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Consumer",
                            UserId = "4895dcbe-94df-45f7-87f5-c519b8380878"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Consumer",
                            UserId = "66342aee-8dc1-4b13-b912-f84fe202ef9d"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Consumer",
                            UserId = "7bfbaf9a-ca2e-462b-8ef7-32d102cf1d5c"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Consumer",
                            UserId = "86eb1953-9686-4779-9d8f-7b236878435b"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Consumer",
                            UserId = "e843d605-789e-4d0b-b9c6-9a2409a04857"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Consumer",
                            UserId = "fdc70c25-e01f-4ecb-8a97-2af2857c4cb9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarWashApp.Entities.Reservation", b =>
                {
                    b.HasOne("CarWashApp.Entities.GeneralUser", "Consumer")
                        .WithMany("Reservations")
                        .HasForeignKey("ConsumerId");

                    b.HasOne("CarWashApp.Entities.Service", "Service")
                        .WithMany("Reservations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarWashApp.Entities.Shop", "Shop")
                        .WithMany("Reservations")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");

                    b.Navigation("Service");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CarWashApp.Entities.Shop", b =>
                {
                    b.HasOne("CarWashApp.Entities.GeneralUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CarWashApp.Entities.ShopsServices", b =>
                {
                    b.HasOne("CarWashApp.Entities.Service", "Service")
                        .WithMany("ShopServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarWashApp.Entities.Shop", "Shop")
                        .WithMany("ShopServices")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarWashApp.Entities.GeneralUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarWashApp.Entities.GeneralUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarWashApp.Entities.GeneralUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarWashApp.Entities.GeneralUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarWashApp.Entities.GeneralUser", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("CarWashApp.Entities.Service", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("ShopServices");
                });

            modelBuilder.Entity("CarWashApp.Entities.Shop", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("ShopServices");
                });
#pragma warning restore 612, 618
        }
    }
}
